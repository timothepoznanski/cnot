name: Auto PR Creation for Production

on:
  push:
    branches: [ dev ]

jobs:
  create-pr:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Check for merge conflicts
      run: |
        echo "üîç Checking for potential merge conflicts..."
        
        # Fetch latest main branch
        git fetch origin main
        
        # Check if branches have common history
        common_base=$(git merge-base HEAD origin/main 2>/dev/null || echo "none")
        
        if [ "$common_base" = "none" ]; then
          echo "‚ö†Ô∏è  Branches have unrelated histories"
          echo "This is common for new repositories. Proceeding with caution..."
          
          # For unrelated histories, we'll do a simple check
          # Create a temporary branch from main and try to merge dev
          git checkout -b temp-merge-check origin/main
          if ! git merge HEAD --allow-unrelated-histories --no-commit --no-ff; then
            echo "‚ùå Merge conflicts detected when merging dev into main!"
            echo "Please resolve conflicts manually before deploying."
            git merge --abort
            git checkout dev
            git branch -D temp-merge-check
            exit 1
          fi
          
          # Clean up
          git merge --abort 2>/dev/null || true
          git checkout dev
          git branch -D temp-merge-check
          
        else
          # Normal case: branches have common history
          echo "‚úÖ Branches have common history, checking for conflicts..."
          
          # Try to merge dev into main (dry run)
          git merge-tree $(git merge-base HEAD origin/main) origin/main HEAD > merge_result.txt
          
          # Check if there are conflicts
          if grep -q "<<<<<<< " merge_result.txt; then
            echo "‚ùå Merge conflicts detected when trying to merge dev into main!"
            echo "Please resolve conflicts manually before deploying."
            echo "Conflicts found in:"
            grep -B2 -A2 "<<<<<<< " merge_result.txt || true
            exit 1
          fi
          
          # Alternative check: simulate the actual PR merge
          git checkout -b temp-merge-check origin/main
          if ! git merge HEAD --no-commit --no-ff; then
            echo "‚ùå Merge conflicts detected when merging dev into main!"
            git merge --abort
            git checkout dev
            git branch -D temp-merge-check
            exit 1
          fi
          
          # Clean up
          git merge --abort 2>/dev/null || true
          git checkout dev
          git branch -D temp-merge-check
        fi
        
        echo "‚úÖ No merge conflicts detected - dev can be safely merged into main"
    
    - name: Wait for tests to complete
      run: |
        echo "‚è≥ Waiting for tests to complete..."
        # Wait a bit for the test workflow to start
        sleep 30
        
        # Check if tests are passing
        echo "üîç Checking test status..."
        latest_commit=$(git rev-parse HEAD)
        
        # Wait for tests to complete (max 5 minutes)
        for i in {1..10}; do
          test_status=$(gh run list --commit $latest_commit --workflow=tests.yml --json conclusion --jq '.[0].conclusion' 2>/dev/null || echo "null")
          
          if [ "$test_status" = "success" ]; then
            echo "‚úÖ Tests passed!"
            break
          elif [ "$test_status" = "failure" ]; then
            echo "‚ùå Tests failed! Stopping deployment."
            exit 1
          else
            echo "‚è≥ Tests still running... (attempt $i/10)"
            sleep 30
          fi
        done
        
        if [ "$test_status" != "success" ]; then
          echo "‚è∞ Tests took too long or failed. Stopping deployment."
          exit 1
        fi
      env:
        GH_TOKEN: ${{ secrets.PAT_TOKEN }}
    
    - name: Create Pull Request
      run: |
        # Check if token is configured
        if [ -z "$GH_TOKEN" ]; then
          echo "‚ùå Error: PAT_TOKEN secret is not configured"
          echo "Add your Personal Access Token in repository secrets with name 'PAT_TOKEN'"
          exit 1
        fi
        
        # Check if a PR already exists
        echo "üîç Checking existing PRs..."
        existing_pr=$(gh pr list --head dev --base main --json number --jq '.[0].number' 2>/dev/null || echo "null")
        
        if [ "$existing_pr" = "null" ] || [ -z "$existing_pr" ]; then
          echo "üìù Creating new Pull Request..."
          # Create new PR
          pr_url=$(gh pr create \
            --base main \
            --head dev \
            --title "üöÄ Auto-deploy from dev to production - Ready for Review" \
            --body "## Automatic production deployment PR

          This PR was created automatically following a push to the \`dev\` branch.

          ### Changes included
          - All recent commits from the \`dev\` branch

          ### Tests status
          ‚úÖ All tests passed before creating this PR

          ### Next steps
          Please review the changes and merge manually when ready.
          Once this PR is merged, production deployment will be triggered automatically.

          ---
          _Created automatically by GitHub Actions_")
          echo "‚úÖ Pull Request created successfully!"
          echo "‚ÑπÔ∏è  PR is ready for manual review and merge."
        else
          echo "‚ÑπÔ∏è  A PR already exists (number: $existing_pr)"
          echo "You can check it on GitHub to see the changes."
        fi
      env:
        GH_TOKEN: ${{ secrets.PAT_TOKEN }}
