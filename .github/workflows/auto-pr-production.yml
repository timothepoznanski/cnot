name: Auto PR to Production

on:
  push:
    branches: [ dev ]

jobs:
  create-pr:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Check for merge conflicts
      run: |
        echo "🔍 Checking for potential merge conflicts..."
        
        # Fetch latest main branch
        git fetch origin main
        
        # Try to merge dev into main (dry run)
        # This simulates what would happen when the PR is merged
        git merge-tree $(git merge-base HEAD origin/main) origin/main HEAD > merge_result.txt
        
        # Check if there are conflicts
        if grep -q "<<<<<<< " merge_result.txt; then
          echo "❌ Merge conflicts detected when trying to merge dev into main!"
          echo "Please resolve conflicts manually before deploying."
          echo "Conflicts found in:"
          grep -B2 -A2 "<<<<<<< " merge_result.txt || true
          exit 1
        fi
        
        # Alternative check: simulate the actual PR merge
        git checkout -b temp-merge-check origin/main
        if ! git merge HEAD --no-commit --no-ff; then
          echo "❌ Merge conflicts detected when merging dev into main!"
          git merge --abort
          git checkout dev
          git branch -D temp-merge-check
          exit 1
        fi
        
        # Clean up
        git merge --abort 2>/dev/null || true
        git checkout dev
        git branch -D temp-merge-check
        
        echo "✅ No merge conflicts detected - dev can be safely merged into main"
    
    - name: Wait for tests to complete
      run: |
        echo "⏳ Waiting for tests to complete..."
        # Wait a bit for the test workflow to start
        sleep 30
        
        # Check if tests are passing
        echo "🔍 Checking test status..."
        latest_commit=$(git rev-parse HEAD)
        
        # Wait for tests to complete (max 5 minutes)
        for i in {1..10}; do
          test_status=$(gh run list --commit $latest_commit --workflow=tests.yml --json conclusion --jq '.[0].conclusion' 2>/dev/null || echo "null")
          
          if [ "$test_status" = "success" ]; then
            echo "✅ Tests passed!"
            break
          elif [ "$test_status" = "failure" ]; then
            echo "❌ Tests failed! Stopping deployment."
            exit 1
          else
            echo "⏳ Tests still running... (attempt $i/10)"
            sleep 30
          fi
        done
        
        if [ "$test_status" != "success" ]; then
          echo "⏰ Tests took too long or failed. Stopping deployment."
          exit 1
        fi
      env:
        GH_TOKEN: ${{ secrets.PAT_TOKEN }}
    
    - name: Create Pull Request
      run: |
        # Check if token is configured
        if [ -z "$GH_TOKEN" ]; then
          echo "❌ Error: PAT_TOKEN secret is not configured"
          echo "Add your Personal Access Token in repository secrets with name 'PAT_TOKEN'"
          exit 1
        fi
        
        # Check if a PR already exists
        echo "🔍 Checking existing PRs..."
        existing_pr=$(gh pr list --head dev --base main --json number --jq '.[0].number' 2>/dev/null || echo "null")
        
        if [ "$existing_pr" = "null" ] || [ -z "$existing_pr" ]; then
          echo "📝 Creating new Pull Request..."
          # Create new PR
          pr_url=$(gh pr create \
            --base main \
            --head dev \
            --title "🚀 Auto-deploy from dev to production" \
            --body "## Automatic production deployment

          This PR was created automatically following a push to the \`dev\` branch.

          ### Changes included
          - All recent commits from the \`dev\` branch

          ### Tests status
          ✅ All tests passed before creating this PR

          ### Actions after merge
          Once this PR is merged, production deployment will be triggered automatically.

          ---
          _Created automatically by GitHub Actions_")
          echo "✅ Pull Request created successfully!"
          
          # Auto-merge the PR immediately (tests already passed)
          echo "🔄 Auto-merging PR..."
          gh pr merge --squash --auto
          echo "✅ PR set to auto-merge!"
        else
          echo "ℹ️  A PR already exists (number: $existing_pr)"
          echo "You can check it on GitHub to see the changes."
        fi
      env:
        GH_TOKEN: ${{ secrets.PAT_TOKEN }}
